{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://example.com/object1658520065.json",
  "title": "WhatsMyName",
  "type": "object",
  "required": [
    "license",
    "authors",
    "categories",
    "sites"
  ],
  "properties": {
    "license": {
      "const": [
        "Copyright (C) 2025 Micah Hoffman",
        "This work is licensed under the Creative Commons Attribution-ShareAlike",
        "4.0 International License. To view a copy of this license, visit",
        "http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to",
        "Creative Commons, PO Box 1866, Mountain View, CA 94042, USA."
      ],
      "description": "Standard license applied to this dataset"
    },
    "authors": {
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "type": "string",
        "minLength": 1
      }
    },
    "categories": {
      "type": "array",
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "type": "string",
        "examples": [
          "archived"
        ]
      }
    },
    "sites": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name",
          "uri_check",
          "e_code",
          "e_string",
          "m_string",
          "m_code",
          "known",
          "cat"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the site",
            "examples": [
              "Anime-Planet"
            ]
          },
          "uri_check": {
            "type": "string",
            "description": "URI to check the site with the {account} string replaced by a username",
            "format": "uri",
            "pattern": "^(http|https)://.*$",
            "examples": [
              "https://www.anime-planet.com/api/validation/username"
            ]
          },
          "uri_pretty": {
            "type": "string",
            "description": "If the check_uri is for an API, this element can show a human-readable page",
            "format": "uri",
            "pattern": "^(http|https)://.*$",
            "examples": [
              "https://www.anime-planet.com/users/{account}"
            ]
          },
          "post_body": {
            "type": "string",
            "description": "If non-empty, then this entry is an HTTP POST and the content of this field are the data",
            "examples": [
              "{\"username\":\"{account}\"}"
            ]
          },
          "headers": {
            "type": "object",
            "description": "A dictionary of headers that should be passed to a site",
            "additionalProperties": {
              "type": "string"
            },
            "examples": [
              {
                "Content-Type": "application/json"
              }
            ]
          },
          "account_pattern": {
            "type": "string",
            "description": "Regular expression for validating usernames (accounts) on this site.",
            "format": "regex",
            "examples": [
              "^[A-Za-z0-9]{3,20}$"
            ]
          },
          "strip_bad_char": {
            "type": "string",
            "description": "Checking apps should ignore or strip these characters from usernames",
            "examples": [
              "."
            ]
          },
          "e_code": {
            "type": "integer",
            "description": "The HTTP response code for a good 'account is there' response as an integer",
            "minimum": 100,
            "maximum": 599,
            "examples": [
              400
            ]
          },
          "e_string": {
            "type": "string",
            "description": "The string in the response that we look for for a good response",
            "examples": [
              "\"msg\":\"Username is unavailable\""
            ]
          },
          "m_string": {
            "type": "string",
            "description": "This string will only be in the response if there is no account found",
            "examples": [
              "\"status\":\"ok\""
            ]
          },
          "m_code": {
            "type": "integer",
            "description": "The HTTP response code for a bad 'account is not there' response as an integer",
            "minimum": 100,
            "maximum": 599,
            "examples": [
              200
            ]
          },
          "known": {
            "type": "array",
            "description": "A list of user accounts that can be used to test for user enumeration",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "examples": [
                "zala",
                "lindapearl"
              ]
            }
          },
          "cat": {
            "type": "string",
            "description": "A category for what the site is mainly used for. The current categories are found at the top of the JSON",
            "enum": [
              "archived",
              "art",
              "blog",
              "business",
              "coding",
              "dating",
              "finance",
              "gaming",
              "health",
              "hobby",
              "images",
              "misc",
              "music",
              "news",
              "political",
              "search",
              "shopping",
              "social",
              "tech",
              "video",
              "xx NSFW xx"
            ],
            "examples": [
              "social"
            ]
          },
          "valid": {
            "type": "boolean",
            "description": "Single value of False. If it is present and False, then checkers should skip this site",
            "examples": [
              true
            ]
          },
          "protection": {
            "type": "array",
            "description": "A list of 1 or more site protections like: [captcha, cloudflare, userauth, multiple, other]",
            "items": {
              "type": "string",
              "enum": [
                "captcha",
                "cloudflare",
                "userauth",
                "multiple",
                "other"
              ]
            },
            "examples": [
              [
                "cloudflare",
                "captcha"
              ]
            ]
          }
        },
        "if": {
          "properties": {
            "post_body": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "post_body"
          ]
        },
        "then": {
          "required": [
            "headers"
          ]
        }
      }
    }
  }
}